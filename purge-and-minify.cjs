/*
  purge-and-minify.js
  -------------------------------------------------------------
  This script finds all .css and .min.css files in dist/css/ (generated by Live Sass Compiler)
  and runs PostCSS to generate .purged.css files (with source maps) for each.
  - .purged.css: Purged and expanded (readable)
  - No minification is performed here.
  - No SCSS compilation is performed here.
  - No separate header/footer/hero CSS files are created.
*/

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const cssDir = path.join(__dirname, 'dist', 'css');

function purgeAndMinify(file) {
  // Remove .css or .min.css extension for base name
  let base = file.endsWith('.min.css') ? path.basename(file, '.min.css') : path.basename(file, '.css');
  const purged = path.join(cssDir, `${base}.purged.css`);
  const htmlFile = path.join(__dirname, 'dist', 'pages', `${base}.html`);

  // Write a static config file once, if not present
  const staticConfigPath = path.join(__dirname, 'postcss.config.purged.cjs');
  if (!fs.existsSync(staticConfigPath)) {
    const staticConfig = `const purgecss = require('@fullhuman/postcss-purgecss').default;\nconst prettify = require('postcss-prettify');\nmodule.exports = {\n  plugins: [\n    purgecss({\n      content: ['dist/pages/*.html'],\n      safelist: ['header-hidden', 'show', 'skills-chart__tab--active', 'skills-chart__category--active'],\n      defaultExtractor: content => content.match(/[\\w-/:]+(?<!:)/g) || [],\n    }),\n    prettify({ expand: true }),\n  ],\n};\n`;
    fs.writeFileSync(staticConfigPath, staticConfig);
  }
  // Expanded (purged, readable)
  execSync(`npx postcss "${file}" -o "${purged}" --map --config ${staticConfigPath}`, { stdio: 'inherit' });
  // Only purged, readable CSS is generated. No minification.
}

fs.readdirSync(cssDir).forEach(file => {
  // Only process non-minified .css files, skip .min.css, .purged.css, .purged.min.css, and any .temp.css files
  if (
    file.endsWith('.css') &&
    !file.endsWith('.min.css') &&
    !file.endsWith('.temp.css') &&
    !file.endsWith('.purged.css') &&
    !file.endsWith('.purged.min.css')
  ) {
    purgeAndMinify(path.join(cssDir, file));
  }
});
